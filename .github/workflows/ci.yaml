name: ci-golang-workflow
#Evento
on:
  # Configura evento de Pull Request
  # Os Jobs serão executados para branche de develop apenas no evento de Pull Request
  pull_request:
    branches:
      - develop
jobs:
  checks-application:
    runs-on: ubuntu-latest
    # Steps: Definem o conjuntos de ações e comandos para rodar no ambiente
      # Actions: são aplicações a serem rodadas em containers do próprio github
        # Actions podem ser tanto oficiais do github como de terceiros
        # Pode ser necessário ler a documentação da aplicação
        # Ex: https://github.com/actions/checkout
        # Actions são definidas usando palavra reservada 'uses'
      # Comandos: Comandos a serem rodados no ambiente
        # Comandos são definidas usando palavra reservada 'run'
    steps:
      # Faz checkout da aplicação no ubuntu
      - uses: actions/checkout@v2
      # Prepara o ambiente go no ubuntu
      - uses: actions/setup-go@v2
        with:
          # Utilização do strategy
          go-version: 1.15
        # Executa testes do go
        # Roda cobertura de testes e salva em coverage.out para ser utilizado pelo sonarqube  
      - run: go test --coverprofile=coverage.out
      - run: go run math.go

      # Scan do sonarcloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Configura ambiente docker no container do github
      # QEMU configura o docker em diversas arquiteturas
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      # Necessário para o docker realizar o build das imagens
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Loga no docker hub 
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          # Secrets são setados no próprio github
          # Settings -> Secrets and Variables -> Actions
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Builda imagem no container do git e faz o push
      - name: Build and push
        # IMPORTANTE!!!
        # id: permite guardar o resultado de uma action e usar em outro step
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          # Não faz o push da imagem no docker hub
          push: true
          # Nome da tag que será gerada
          # Se estiver sendo publicada deve seguir padrão do docker hub
          tags: jacome/cicd:latest